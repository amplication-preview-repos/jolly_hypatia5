/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Rule as PrismaRule } from "@prisma/client";

export class RuleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RuleCountArgs, "select">): Promise<number> {
    return this.prisma.rule.count(args);
  }

  async rules(args: Prisma.RuleFindManyArgs): Promise<PrismaRule[]> {
    return this.prisma.rule.findMany(args);
  }
  async rule(args: Prisma.RuleFindUniqueArgs): Promise<PrismaRule | null> {
    return this.prisma.rule.findUnique(args);
  }
  async createRule(args: Prisma.RuleCreateArgs): Promise<PrismaRule> {
    return this.prisma.rule.create(args);
  }
  async updateRule(args: Prisma.RuleUpdateArgs): Promise<PrismaRule> {
    return this.prisma.rule.update(args);
  }
  async deleteRule(args: Prisma.RuleDeleteArgs): Promise<PrismaRule> {
    return this.prisma.rule.delete(args);
  }
}
