/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RuleActionService } from "../ruleAction.service";
import { RuleActionCreateInput } from "./RuleActionCreateInput";
import { RuleAction } from "./RuleAction";
import { RuleActionFindManyArgs } from "./RuleActionFindManyArgs";
import { RuleActionWhereUniqueInput } from "./RuleActionWhereUniqueInput";
import { RuleActionUpdateInput } from "./RuleActionUpdateInput";

export class RuleActionControllerBase {
  constructor(protected readonly service: RuleActionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RuleAction })
  async createRuleAction(
    @common.Body() data: RuleActionCreateInput
  ): Promise<RuleAction> {
    return await this.service.createRuleAction({
      data: data,
      select: {
        createdAt: true,
        details: true,
        id: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RuleAction] })
  @ApiNestedQuery(RuleActionFindManyArgs)
  async ruleActions(@common.Req() request: Request): Promise<RuleAction[]> {
    const args = plainToClass(RuleActionFindManyArgs, request.query);
    return this.service.ruleActions({
      ...args,
      select: {
        createdAt: true,
        details: true,
        id: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RuleAction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ruleAction(
    @common.Param() params: RuleActionWhereUniqueInput
  ): Promise<RuleAction | null> {
    const result = await this.service.ruleAction({
      where: params,
      select: {
        createdAt: true,
        details: true,
        id: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RuleAction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRuleAction(
    @common.Param() params: RuleActionWhereUniqueInput,
    @common.Body() data: RuleActionUpdateInput
  ): Promise<RuleAction | null> {
    try {
      return await this.service.updateRuleAction({
        where: params,
        data: data,
        select: {
          createdAt: true,
          details: true,
          id: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RuleAction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRuleAction(
    @common.Param() params: RuleActionWhereUniqueInput
  ): Promise<RuleAction | null> {
    try {
      return await this.service.deleteRuleAction({
        where: params,
        select: {
          createdAt: true,
          details: true,
          id: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
