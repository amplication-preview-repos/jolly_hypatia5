/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RuleAction } from "./RuleAction";
import { RuleActionCountArgs } from "./RuleActionCountArgs";
import { RuleActionFindManyArgs } from "./RuleActionFindManyArgs";
import { RuleActionFindUniqueArgs } from "./RuleActionFindUniqueArgs";
import { CreateRuleActionArgs } from "./CreateRuleActionArgs";
import { UpdateRuleActionArgs } from "./UpdateRuleActionArgs";
import { DeleteRuleActionArgs } from "./DeleteRuleActionArgs";
import { RuleActionService } from "../ruleAction.service";
@graphql.Resolver(() => RuleAction)
export class RuleActionResolverBase {
  constructor(protected readonly service: RuleActionService) {}

  async _ruleActionsMeta(
    @graphql.Args() args: RuleActionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RuleAction])
  async ruleActions(
    @graphql.Args() args: RuleActionFindManyArgs
  ): Promise<RuleAction[]> {
    return this.service.ruleActions(args);
  }

  @graphql.Query(() => RuleAction, { nullable: true })
  async ruleAction(
    @graphql.Args() args: RuleActionFindUniqueArgs
  ): Promise<RuleAction | null> {
    const result = await this.service.ruleAction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RuleAction)
  async createRuleAction(
    @graphql.Args() args: CreateRuleActionArgs
  ): Promise<RuleAction> {
    return await this.service.createRuleAction({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => RuleAction)
  async updateRuleAction(
    @graphql.Args() args: UpdateRuleActionArgs
  ): Promise<RuleAction | null> {
    try {
      return await this.service.updateRuleAction({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RuleAction)
  async deleteRuleAction(
    @graphql.Args() args: DeleteRuleActionArgs
  ): Promise<RuleAction | null> {
    try {
      return await this.service.deleteRuleAction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
