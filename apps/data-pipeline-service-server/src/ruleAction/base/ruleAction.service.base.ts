/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, RuleAction as PrismaRuleAction } from "@prisma/client";

export class RuleActionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RuleActionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.ruleAction.count(args);
  }

  async ruleActions(
    args: Prisma.RuleActionFindManyArgs
  ): Promise<PrismaRuleAction[]> {
    return this.prisma.ruleAction.findMany(args);
  }
  async ruleAction(
    args: Prisma.RuleActionFindUniqueArgs
  ): Promise<PrismaRuleAction | null> {
    return this.prisma.ruleAction.findUnique(args);
  }
  async createRuleAction(
    args: Prisma.RuleActionCreateArgs
  ): Promise<PrismaRuleAction> {
    return this.prisma.ruleAction.create(args);
  }
  async updateRuleAction(
    args: Prisma.RuleActionUpdateArgs
  ): Promise<PrismaRuleAction> {
    return this.prisma.ruleAction.update(args);
  }
  async deleteRuleAction(
    args: Prisma.RuleActionDeleteArgs
  ): Promise<PrismaRuleAction> {
    return this.prisma.ruleAction.delete(args);
  }
}
