/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RuleCondition } from "./RuleCondition";
import { RuleConditionCountArgs } from "./RuleConditionCountArgs";
import { RuleConditionFindManyArgs } from "./RuleConditionFindManyArgs";
import { RuleConditionFindUniqueArgs } from "./RuleConditionFindUniqueArgs";
import { CreateRuleConditionArgs } from "./CreateRuleConditionArgs";
import { UpdateRuleConditionArgs } from "./UpdateRuleConditionArgs";
import { DeleteRuleConditionArgs } from "./DeleteRuleConditionArgs";
import { RuleConditionService } from "../ruleCondition.service";
@graphql.Resolver(() => RuleCondition)
export class RuleConditionResolverBase {
  constructor(protected readonly service: RuleConditionService) {}

  async _ruleConditionsMeta(
    @graphql.Args() args: RuleConditionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RuleCondition])
  async ruleConditions(
    @graphql.Args() args: RuleConditionFindManyArgs
  ): Promise<RuleCondition[]> {
    return this.service.ruleConditions(args);
  }

  @graphql.Query(() => RuleCondition, { nullable: true })
  async ruleCondition(
    @graphql.Args() args: RuleConditionFindUniqueArgs
  ): Promise<RuleCondition | null> {
    const result = await this.service.ruleCondition(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RuleCondition)
  async createRuleCondition(
    @graphql.Args() args: CreateRuleConditionArgs
  ): Promise<RuleCondition> {
    return await this.service.createRuleCondition({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => RuleCondition)
  async updateRuleCondition(
    @graphql.Args() args: UpdateRuleConditionArgs
  ): Promise<RuleCondition | null> {
    try {
      return await this.service.updateRuleCondition({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RuleCondition)
  async deleteRuleCondition(
    @graphql.Args() args: DeleteRuleConditionArgs
  ): Promise<RuleCondition | null> {
    try {
      return await this.service.deleteRuleCondition(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
