/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, RuleCondition as PrismaRuleCondition } from "@prisma/client";

export class RuleConditionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RuleConditionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.ruleCondition.count(args);
  }

  async ruleConditions(
    args: Prisma.RuleConditionFindManyArgs
  ): Promise<PrismaRuleCondition[]> {
    return this.prisma.ruleCondition.findMany(args);
  }
  async ruleCondition(
    args: Prisma.RuleConditionFindUniqueArgs
  ): Promise<PrismaRuleCondition | null> {
    return this.prisma.ruleCondition.findUnique(args);
  }
  async createRuleCondition(
    args: Prisma.RuleConditionCreateArgs
  ): Promise<PrismaRuleCondition> {
    return this.prisma.ruleCondition.create(args);
  }
  async updateRuleCondition(
    args: Prisma.RuleConditionUpdateArgs
  ): Promise<PrismaRuleCondition> {
    return this.prisma.ruleCondition.update(args);
  }
  async deleteRuleCondition(
    args: Prisma.RuleConditionDeleteArgs
  ): Promise<PrismaRuleCondition> {
    return this.prisma.ruleCondition.delete(args);
  }
}
